# -*- coding: utf-8 -*-
"""ShopsmartAssistant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KERyiBetKw-IIwhB2m_c1kWADGziR7NZ
"""



import re
import random
import spacy
import requests

# Load spaCy NLP Model
nlp = spacy.load("en_core_web_sm")

class EcommerceSupportBot:
    exit_commands = ("quit", "pause", "exit", "goodbye", "bye", "later")
    no_more_queries = ("no", "i don't", "nothing else", "that's it", "all good", "nope", "nah")

    def __init__(self):
        self.support_topics = {
            'track_order': r'.*\b(track|where is|status|locate|follow)\b.*\b(order|package|shipment|parcel|delivery)\b.*',
            'payment_issue': r'.*\b(payment|charged|money issue|refund status|billing)\b.*',
            'return_issue': r'.*\b(return|exchange|replace|send back|refund)\b.*',
            'account_issue': r'.*\b(account|login|sign in|password|otp|hacked)\b.*',
            'order_issues': r'.*\b(order|placed|confirm|not going through|wrong item|cart)\b.*',
            'shipping_issue': r'.*\b(delivery|arriving|shipped|late|tracking|package|courier)\b.*',
            'subscription_issue': r'.*\b(subscription|membership|cancel membership|wrong tier)\b.*',
            'customer_support': r'.*\b(customer support|help|agent|representative|contact)\b.*',
            'product_recommendation': r'.*\b(recommend|suggest|popular|gift|what should i buy)\b.*',
            'discounts_promotions': r'.*\b(discount|promotion|coupon|offer|deal|sale)\b.*',
            'order_cancellation': r'.*\b(cancel|cancellation|stop order|undo order)\b.*',
            'feedback': r'.*\b(feedback|rate|review|suggestion|complaint)\b.*'
        }

    def greet(self):
        self.name = input("👋 Hello! Welcome to **E-Store Support**. What is your name?\n").strip()
        print(f"Hi **{self.name}**, how can I assist you today? 😊")
        self.chat()

    def chat(self):
        while True:
            reply = input(">> ").strip()
            if self.make_exit(reply):
                break
            self.match_reply(reply)
            if self.ask_more_queries():
                break

    def make_exit(self, reply):
        """Checks if the user wants to exit."""
        if any(command in reply.lower() for command in self.exit_commands):
            print("✅ Thank you for using **E-Store Support**! Have a great day! 😊")
            return True
        return False

    def match_reply(self, reply):
        """Uses NLP to determine which function to call based on user input."""
        doc = nlp(reply.lower())

        if "track" in doc.text and "order" in doc.text:
            self.handle_track_order()
        elif "refund status" in doc.text or "check refund" in doc.text or "where is my refund" in doc.text:
            self.handle_refund_status()
        elif "refund" in doc.text or "return" in doc.text or "exchange" in doc.text:
            self.handle_return_issue()
        elif "payment" in doc.text:
            self.handle_payment_issue()
        elif "account" in doc.text or "login" in doc.text:
            self.handle_account_issue()
        elif "cancel" in doc.text or "cancellation" in doc.text:
            self.handle_order_cancellation()
        elif "shipping" in doc.text or "delivery" in doc.text:
            self.handle_shipping_issue()
        elif "subscription" in doc.text:
            self.handle_subscription_issue()
        elif "customer" in doc.text or "support" in doc.text:
            self.handle_customer_support()
        elif "recommend" in doc.text or "suggest" in doc.text or "gift" in doc.text:
            self.handle_product_recommendation()
        elif "discount" in doc.text or "promotion" in doc.text or "coupon" in doc.text:
            self.handle_discounts_promotions()
        elif "feedback" in doc.text or "review" in doc.text or "rate" in doc.text:
            self.handle_feedback()
        else:
            self.no_match_intent()

    def handle_track_order(self):
        """Handles order tracking using a mock API."""
        self.handle_api_request(
            input_message="📦 Please provide your **Order ID** to track your shipment:\n",
            validation_pattern=r'^\d{8}[A-Z]{4}$',
            error_message="❌ **Invalid Order ID!**\n✅ Hint: Order IDs must contain exactly **8 numbers followed by 4 uppercase letters** (e.g., **12345678ABCD**).",
            api_url="https://run.mocky.io/v3/86cf1e96-ea39-45c7-b5c8-2b199b10ea9a",
            success_message=lambda data: f"✅ **Order {data['order_id']}** is **{data['status']}**. 🚚\n📅 Expected Delivery: {data['expected_delivery']} via {data['courier']}.",
            failure_message="⚠️ Sorry, we couldn't find your order. Please check the Order ID."
        )

    def handle_refund_status(self):
        """Handles refund tracking using a mock API."""
        self.handle_api_request(
            input_message="💰 Please provide your **Refund ID** to check the refund status:\n",
            validation_pattern=r'^RF\d{8}$',
            error_message="❌ **Invalid Refund ID!**\n✅ Hint: Refund IDs must start with 'RF' followed by **8 digits** (e.g., **RF12345678**).",
            api_url="https://run.mocky.io/v3/75b38821-4596-467c-b815-107fd3d1874b",
            success_message=lambda data: f"✅ **Refund {data['refund_id']}** is **{data['status']}**. 💵\n📅 Expected Completion: {data['expected_completion']}.\n💰 Refund Amount: {data['amount']}.",
            failure_message="⚠️ Sorry, we couldn't find your refund details. Please check the Refund ID."
        )

    def handle_api_request(self, input_message, validation_pattern, error_message, api_url, success_message, failure_message):
        """Generic method to handle API requests."""
        while True:
            user_input = input(input_message).strip()
            if not re.match(validation_pattern, user_input):
                print(error_message)
                continue

            response = requests.get(api_url)
            if response.status_code == 200:
                data = response.json()
                print(success_message(data))
            else:
                print(failure_message)
            break

    def handle_product_recommendation(self):
        """Handles product recommendations."""
        products = [
            "Smartphone XYZ - Best camera in its class!",
            "Laptop ABC - Lightweight and powerful.",
            "Headphones DEF - Noise-cancelling and comfortable.",
            "Smartwatch GHI - Tracks your fitness and health."
        ]
        print("🛍️ Here are some popular products you might like:")
        for product in products:
            print(f"- {product}")

    def handle_discounts_promotions(self):
        """Handles discounts and promotions."""
        print("🎉 Here are some ongoing promotions:")
        print("- **FLAT20**: Get 20% off on all orders above $100.")
        print("- **FREESHIP**: Free shipping on orders above $50.")
        print("- **NEWUSER**: New users get an extra 10% off on their first order.")

    def handle_order_cancellation(self):
        """Handles order cancellation requests."""
        order_id = input("❌ Please provide your **Order ID** to cancel your order:\n").strip()
        if re.match(r'^\d{8}[A-Z]{4}$', order_id):
            print(f"✅ Your order **{order_id}** has been **cancelled successfully**.")
        else:
            print("❌ **Invalid Order ID!** Please check the Order ID and try again.")

    def handle_feedback(self):
        """Collects feedback from the user."""
        feedback = input("📝 We'd love to hear your feedback! Please share your thoughts:\n").strip()
        print("✅ Thank you for your feedback! We appreciate your input.")

    def handle_payment_issue(self):
        """Handles payment-related issues."""
        print("💳 It looks like you're facing a **payment issue**. Please check your bank details or contact support.")

    def handle_account_issue(self):
        """Handles account-related issues."""
        print("🔐 It looks like you're having trouble with your account. Please check your username and password, or reset your password if needed.")

    def handle_shipping_issue(self):
        """Handles shipping-related issues."""
        print("🚚 It looks like there's an issue with your delivery. Please provide your **Order ID** so I can check the status for you.")

    def no_match_intent(self):
        """Handles cases where the chatbot doesn't understand the user's input."""
        print("🤖 I'm sorry, I didn't understand that. Could you please clarify?")

    def ask_more_queries(self):
        """Asks the user if they have more queries after resolving the current issue."""
        reply = input("\n❓ Do you have **any more queries**? (yes/no)\n").strip().lower()
        if reply in self.no_more_queries:
            print("✅ I'm glad I could help! Have a **wonderful day**! 😊")
            return True
        else:
            print("Great! What else can I help you with?")
            return False

# Start the chatbot
EcommerceSupportBot().greet()





